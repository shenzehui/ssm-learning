<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qfedu.dao.MemberDao">

    <!--
        eviction 表示缓存策略  FIFO 按对象先进先出移出   LRU 移出最长时间不被使用的对象
        flushInterval 刷新间隔  60s  默认不设置
        size 最多可以存储结果对象1024个
        readOnly  返回对象被认为是只读,无法修改  默认是false
    -->
    <cache readOnly="true" size="1024" flushInterval="60000" eviction="LRU"/>

    <resultMap id="MemberMap" type="member">
        <id column="member_id" property="memberId"/>
        <result column="member_nick" property="memberNick"/>
        <result column="member_gender" property="memberGender"/>
        <result column="member_age" property="memberAge"/>
        <result column="member_city" property="memberCity"/>
    </resultMap>


    <!--    <select id="queryMemberBy" resultMap="MemberMap">-->
    <!--        select member_id,member_nick,member_gender,member_age,member_city-->
    <!--        from members-->
    <!--        where 1=1-->
    <!--        <if test="gender != null"> &lt;!&ndash;这里的gender  就是参数对象的属性或者Map的key&ndash;&gt;-->
    <!--            and member_gender = #{gender}-->
    <!--        </if>-->
    <!--        <if test="minAge != null">-->
    <!--            and member_age &gt;= #{minAge} &lt;!&ndash;&gt; &ndash;&gt;-->
    <!--        </if>-->
    <!--        <if test="maxAge != null">-->
    <!--            and member_age &lt;= #{maxAge}-->
    <!--        </if>-->
    <!--        <if test="city != null">-->
    <!--            and member_city = #{city}-->
    <!--        </if>-->
    <!--    </select>-->

<!--        <select id="queryMemberBy" resultMap="MemberMap">-->
<!--            select member_id,member_nick,member_gender,member_age,member_city-->
<!--            from members-->
<!--            <where>-->
<!--                <if test="gender != null"> &lt;!&ndash;这里的gender  就是参数对象的属性或者Map的key&ndash;&gt;-->
<!--                    and member_gender = #{gender}-->
<!--                </if>-->
<!--                <if test="minAge != null">-->
<!--                    and member_age &gt;= #{minAge} &lt;!&ndash;&gt; &ndash;&gt;-->
<!--                </if>-->
<!--                <if test="maxAge != null">-->
<!--                    and member_age &lt;= #{maxAge}-->
<!--                </if>-->
<!--                <if test="city != null">-->
<!--                    and member_city = #{city}-->
<!--                </if>-->
<!--            </where>-->
<!--        </select>-->

    <select id="queryMemberBy" resultMap="MemberMap">
        select member_id,member_nick,member_gender,member_age,member_city
        from members
        <trim prefix="where" prefixOverrides="and | or" suffix="order by member_age"> <!--prefixOverrides="and | or" 语句开头若有and或者or 则会被去除-->
            <if test="gender != null"> <!--这里的gender  就是参数对象的属性或者Map的key-->
                and member_gender = #{gender}
            </if>
            <if test="minAge != null">
                and member_age &gt;= #{minAge} <!--&gt; -->
            </if>
            <if test="maxAge != null">
                and member_age &lt;= #{maxAge}
            </if>
            <if test="city != null">
                and member_city = #{city}
            </if>
        </trim>
    </select>

    <select id="queryMemberByCity" resultMap="MemberMap">
        select member_id,member_nick,member_gender,member_age,member_city
        from members
        where member_city in
        <foreach collection="list" item="cityName" separator="," open="(" close=")">
            #{cityName}
        </foreach>
    </select>

    <!--如果参数时String类型，需要parameterType声明参数类型-->
    <select id="searchMemberByNick" parameterType="java.lang.String" resultMap="MemberMap">
        select member_id,member_nick,member_gender,member_age,member_city
        from members
        where member_nick like '%${keyWord}%'
    </select>

    <!---
        ${key}  表示获取参数，先获取参数的值拼接到SQL语句中，再编译执行SQL语句；可能引起SQL注入问题
        #{key} 表示获取参数，先完成SQL编译（预编译），预编译之后再将获取的参数设置到SQL语句中，可以避免SQL注入问题
    -->

    <!--useCache="true" 表示查询是否使用缓存-->
    <select id="queryMemberById" resultMap="MemberMap" useCache="true">
        select member_id,member_nick,member_gender,member_age,member_city
        from members
        where member_id = #{mid}
    </select>

    <!--flushCache表示修改后会自动修改缓存-->
    <update id="updateMember" flushCache="true">
        update members set member_age = #{age}
        where member_id = #{mid}
    </update>

</mapper>
