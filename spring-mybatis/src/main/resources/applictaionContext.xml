<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="com.szh"/>

    <!--加载druid.properties配置文件-->
    <context:property-placeholder location="classpath:druid.properties"/>

<!--    <context:property-placeholder location="classpath:jdbc.properties"/>-->

    <!--依赖Spring容器完成数据源DataSource的创建-->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${druid.url}"/>
        <!--driverClassName对应的是字符串 而driver对应的是一个Driver对象-->
        <property name="driverClassName" value="${druid.driver}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>

        <property name="initialSize" value="${druid.pool.init}"/>
        <property name="minIdle" value="${druid.pool.minIdle}"/>
        <property name="maxActive" value="${druid.pool.maxActive}"/>
        <property name="maxWait" value="${druid.pool.timeout}"/>
    </bean>

    <!-- 使用mybatis自带数据源
    <bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
        <property name="url" value="${url}"/>
        <property name="driver" value="${driver}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>-->

    <!--依赖Spring容器完成MyBatis的SqlSessionFactory对象的创建  因为SqlSessionFactory是个接口，所以要使用它的实现类SqlSessionFactoryBean来创建，该
    对象来自于mybatis-spring依赖-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--必须：数据源配置）-->
        <property name="dataSource" ref="druidDataSource"/>
        <!--必须：配置映射文件的路径-->
        <property name="mapperLocations" value="classpath:mappers/*Mapper.xml"/>
        <!--可选：配置需要定义别名的实体类的包-->
        <property name="typeAliasesPackage" value="com.szh.pojo"/>
        <!--可选：MyBatis主配置文件中的额外配置，例如开启二级缓存-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!--相当于执行SqlSession sqlSession = sqlSessionFactory.openSession();
        UserDAO mapper = sqlSession.getMapper(UserDAO.class);-->
    <!--加载dao包中的所有DAO接口，通过sqlSessionFactory获取SqlSession,然后创建所有DAO接口对象，存储在Spring容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.szh.dao"/>
    </bean>

    <!--基于xml配置事务-->
    <!--1.将spring提供的事务管理类配置给Spring容器  DataSourceTransactionManager是spring-jdbc依赖提供-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    &lt;!&ndash;2.通过spring-jdbc提供的tx标签，声明事务管理策略&ndash;&gt;
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            &lt;!&ndash;
                isolation 设置事务隔离级别：READ_UNCOMMITTED：读未提交 READ_COMMITTED：读已提交  REPEATABLE_READ：可重复读  SERIALIZABLE：串行化
                propagation 设置事务的传播机制
                    √ REQUIRED 如果上层方法没有事务，则创建一个新的事务，如果已经存在事务，则加入到事务中（必须有一个事务，在事务中执行） Spring的默认传播机制
                    √ SUPPORTS 如果上层方法没有事务，则以非事务方式执行，如果已经存在事务，则加入到事务中
                    REQUIRES_NEW  如果上层方法没有事务，则创建一个新的事务，如果已经存在事务，则将当前事务挂起
                    NOT_SUPPORTED 如果上层方法没有事务，则以非事务方式执行，如果已经存在事务，则将当前事务挂起 （不支持事务，在非事务中执行）
                    NEVER 如果上层方法没有事务，则以非事务方式执行，如果已经存在事务，则抛出异常
                    MANDATORY 如果上层方法已经存在事务，则加入到事务中执行，如果不存在事务，则抛出异常（必须存在事务，但不允许创建新的事务，执行方法必须在别的事务中）
                    NESTED 如果上层方法没有事务，则创建一个新的事务，如果已经存在事务，则到嵌套到当前事务中
            &ndash;&gt;
            <tx:method name="insert*" isolation="REPEATABLE_READ" propagation="REQUIRED"/>  &lt;!&ndash;REQUIRED 如果没有事务，则开启事务&ndash;&gt;
            <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED"/>
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED"/>
            <tx:method name="query*" isolation="REPEATABLE_READ" propagation="SUPPORTS"/>  &lt;!&ndash;SUPPORTS 支持事务，外层有事务，当成事务一部分执行，外层没有事务，就不会开启事务&ndash;&gt;
        </tx:attributes>
    </tx:advice>

    &lt;!&ndash;3.将事务管理策略以AOP配置 应用于Service操作方法&ndash;&gt;
    <aop:config>
        &lt;!&ndash;定义切入点&ndash;&gt;
        <aop:pointcut id="crud" expression="execution(* com.szh.service.*.*(..))"/>
        &lt;!&ndash;添加事务管理策略&ndash;&gt;
        <aop:advisor advice-ref="txAdvice" pointcut-ref="crud"/>
    </aop:config>-->


    <!--基于注解配置事务-->
    <!--1.将spring提供的事务管理类配置给Spring容器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>
    <!--2.声明使用注解完成事务配置-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>